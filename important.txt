TYPE THE FOLLOWING IN DIFFERENT CELLS

OF GOOGLE COLAB 
..............................
CODE BETWEEN DOTS MEAN CELLS 
...................................



!pip3 install torch==1.2.0+cu92 torchvision==0.4.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html
....................................................................................................................

import nltk
.........................................................................................................................
nltk.download('punkt')
...............................................................................................................
import numpy as np
import random
import json

import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader

from model import NeuralNet
from nltk_utils import bag_of_words, tokenize, stem

# Load the intents data from the JSON file
with open('intents.json', 'r') as f:
    intents = json.load(f)

# Preprocess the data by stemming and lowercasing the words, and creating
# a bag of words representation for each sentence
all_words = []
tags = []
xy = []
for intent in intents['intents']:
    tag = intent['tag']
    tags.append(tag)
    for pattern in intent['patterns']:
        w = tokenize(pattern)
        all_words.extend(w)
        xy.append((w, tag))

# stem and lower each word
ignore_words = ['?', '.', '!']
all_words = [stem(w) for w in all_words if w not in ignore_words]
# remove duplicates and sort
all_words = sorted(set(all_words))
tags = sorted(set(tags))

# Create the training data
X_train = []
y_train = []
for (pattern_sentence, tag) in xy:
    bag = bag_of_words(pattern_sentence, all_words)
    X_train.append(bag)
    label = tags.index(tag)
    y_train.append(label)

# Convert the training data to numpy arrays
X_train = np.array(X_train)
y_train = np.array(y_train)

# Define the ChatDataset class, which represents the training data
class ChatDataset(Dataset):
    def __init__(self):
        self.n_samples = len(X_train)
        self.x_data = X_train
        self.y_data = y_train

    def __getitem__(self, index):
        return self.x_data[index], self.y_data[index]

    def __len__(self):
        return self.n_samples

# Create a DataLoader to load the training data in batches
dataset = ChatDataset()
train_loader = DataLoader(dataset=dataset, batch_size=8, shuffle=True, num_workers=0)

# Set the device to use for training


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Initialize the model and move it to the device
input_size = len(X_train[0])
hidden_size = 8
output_size = len(tags)
model = NeuralNet(input_size, hidden_size, output_size).to(device)

# Define the loss function and the optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Train the model for 1000 epochs
num_epochs = 1000



for epoch in range(num_epochs):
    for (words, labels) in train_loader:
        # Move the data to the device
        words = words.to(device)
        labels = labels.to(device)

        # Forward pass
        outputs = model(words)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    if (epoch+1) % 100 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

print('Training complete')

# Save the model state to a file
torch.save({
            'model_state': model.state_dict(),
            'input_size': input_size,
            'hidden_size': hidden_size,
            'output_size': output_size,
            'all_words': all_words,
            'tags': tags
            }, 'data.pth')



......................................









import random
import json

import torch

from model import NeuralNet
from nltk_utils import bag_of_words, tokenize

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load the intents data from the JSON file
with open('intents.json', 'r') as f:
    intents = json.load(f)

# Load the trained model
FILE = "data.pth"
data = torch.load(FILE)
input_size = data["input_size"]
hidden_size = data["hidden_size"]
output_size = data["output_size"]
all_words = data['all_words']
tags = data['tags']
model_state = data["model_state"]
model = NeuralNet(input_size, hidden_size, output_size).to(device)
model.load_state_dict(model_state)
model.eval()

# Set the name of the chatbot
bot_name = "Big6wh"

# Start the chat loop
print("Let's chat! (type 'quit' to exit)")
while True:
    # Get the user's input
    sentence = input("You: ")
    if sentence == "quit":
        break

    # Tokenize the input and create a bag of words representation
    sentence = tokenize(sentence)
    X = bag_of_words(sentence, all_words)
    X = X.reshape(1, X.shape[0])
    X = torch.from_numpy(X).to(device)

    # Use the model to predict the intent
    output = model(X)
    _, predicted = torch.max(output, dim=1)
    tag = tags[predicted.item()]

    # Find the response that matches the predicted intent
    responses = []
    for intent in intents['intents']:
        if tag == intent["tag"]:
            responses = intent['responses']
            break

    # If a response was found, randomly choose one and print it
    if len(responses) > 0:
        print(f"{bot_name}: {random.choice(responses)}")
    # If no response was found, print an error message
    else:
        print(f"{bot_name}: I do not understand...")

.........................................................................................................................................
